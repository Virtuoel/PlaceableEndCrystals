buildscript {
	repositories {
		jcenter()
		maven {
			name = "forge"
			url = "https://files.minecraftforge.net/maven"
		}
		maven {
			name = "gradle"
			url "https://plugins.gradle.org/m2/"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/groups/public"
		}
	}
	dependencies {
		classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
	}
}
plugins {
	id "com.matthewprenger.cursegradle" version "1.0.10"
}
apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "com.matthewprenger.cursegradle"
apply plugin: "maven"

repositories {
	maven {
		name = "CurseForge"
		url = "https://minecraft.curseforge.com/api/maven/"
	}
	maven {
		name = "JitPack"
		url = "https://jitpack.io"
	}
}

version = "${project.mc_version}-${project.version_major}.${project.version_minor}.${project.version_patch}.${project.version_revision}"

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava {
	sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
	options.encoding = "UTF-8"
}

minecraft {
	version = "${project.mc_version}-${project.forge_version}"
	runDir = "run"
	mappings = project.mcp_mappings
	makeObfSourceJar = true
	
	replace "@VERSION@", project.version
	
	if(project.hasProperty("signSHA1"))
	{
		replace "@FINGERPRINT@", project.findProperty("signSHA1")
	}
	else
	{
		replace "@FINGERPRINT@", ""
	}
	
	if(project.hasProperty("core_plugin"))
	{
		clientJvmArgs += "-Dfml.coreMods.load=" + project.core_plugin
		serverJvmArgs += "-Dfml.coreMods.load=" + project.core_plugin
	}
	
	serverJvmArgs += "-Dfml.doNotBackup=true"
	serverJvmArgs += "-Dfml.queryResult=confirm"
	
	clientJvmArgs += "-Dlog4j.skipJansi=true"
	serverJvmArgs += "-Dlog4j.skipJansi=true"
}

dependencies
{
	
}

extractAnnotationsJar.enabled = false

eclipse.project {
	buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
	natures 'org.eclipse.buildship.core.gradleprojectnature'
}

if(JavaVersion.current().isJava8Compatible())
{
	allprojects
	{
		tasks.withType(Javadoc)
		{
			options.addStringOption("Xdoclint:none", "-quiet")
		}
	}
}

if(project.hasProperty("core_plugin"))
{
	if(!project.hasProperty("core_jar_in_jar"))
	{
		project.ext."core_jar_in_jar" = false
	}
	else if(project.core_jar_in_jar != true)
	{
		project.core_jar_in_jar = false
	}
}
else
{
	project.ext."core_jar_in_jar" = false
}

task apiJar(type: Jar) {
	from sourceSets.main.output
	from sourceSets.main.allJava
	include "${project.group}/${project.mod_id}/api/**"
	manifest.mainAttributes(
		"Built-On-Java": "${System.getProperty("java.vm.version")} + (${System.getProperty("java.vm.vendor")})",
		"Implementation-Title": project.name + "-api",
		"Implementation-Version": project.version,
		"Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}:api",
		"Built-On": "${project.mc_version}-${project.forge_version}"
	)
	classifier = "api"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	from javadoc.destinationDir
	manifest.mainAttributes(
		"Built-On-Java": "${System.getProperty("java.vm.version")} + (${System.getProperty("java.vm.vendor")})",
		"Implementation-Title": project.name + "-javadoc",
		"Implementation-Version": project.version,
		"Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}:javadoc",
		"Built-On": "${project.mc_version}-${project.forge_version}"
	)
	classifier = "javadoc"
}

task deobfJar(type: Jar) {
	from sourceSets.main.output
	manifest
	{
		attributes "Built-On-Java": "${System.getProperty("java.vm.version")} + (${System.getProperty("java.vm.vendor")})"
		attributes "Implementation-Title": project.name + "-deobf"
		attributes "Implementation-Version": project.version
		attributes "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}:deobf"
		attributes "Built-On": "${project.mc_version}-${project.forge_version}"
		attributes "FMLAT": "${project.mod_id}_at.cfg"
		if(project.hasProperty("core_plugin"))
		{
			attributes "FMLCorePlugin": project.core_plugin
		}
	}
	classifier = "deobf"
}

task signDeobfJar(type: SignJar) {
	onlyIf
	{
		project.hasProperty("keyStore")
	}
	
	if(project.hasProperty("keyStore"))
	{
		keyStore = project.findProperty("keyStore")
		alias = project.findProperty("keyStoreAlias")
		storePass = project.findProperty("keyStorePass")
		keyPass = project.findProperty("keyStoreKeyPass")
		
		inputFile = deobfJar.archivePath
		outputFile = deobfJar.archivePath
	}
}

task coreJar(type: Jar) {
	onlyIf
	{
		project.hasProperty("core_plugin")
	}
	
	if(project.hasProperty("core_plugin"))
	{
		from(sourceSets.main.output)
		{
			include "${project.group}/${project.mod_id}/asm/**"
		}
		manifest
		{
			attributes "Built-On-Java": "${System.getProperty("java.vm.version")} + (${System.getProperty("java.vm.vendor")})"
			attributes "Implementation-Title": project.name + "-corePlugin"
			attributes "Implementation-Version": project.version
			attributes "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}:corePlugin"
			attributes "Built-On": "${project.mc_version}-${project.forge_version}"
			attributes "FMLAT": "${project.mod_id}_at.cfg"
			attributes "FMLCorePlugin": project.core_plugin
		}
		classifier = "corePlugin"
		group = "build"
	}
}

reobf
{
	coreJar
	{
		mappingType = "SEARGE"
	}
}

task signCoreJar(type: SignJar) {
	onlyIf
	{
		project.hasProperty("core_plugin")
	}
	
	if(project.hasProperty("core_plugin"))
	{
		onlyIf
		{
			project.hasProperty("keyStore")
		}
		
		if(project.hasProperty("keyStore"))
		{
			keyStore = project.findProperty("keyStore")
			alias = project.findProperty("keyStoreAlias")
			storePass = project.findProperty("keyStorePass")
			keyPass = project.findProperty("keyStoreKeyPass")
			
			inputFile = coreJar.archivePath
			outputFile = coreJar.archivePath
		}
		
		dependsOn reobfCoreJar
	}
}

jar {
	if(project.core_jar_in_jar)
	{
		dependsOn signCoreJar
		from(coreJar.archivePath.absolutePath)
		{
			include "*"
		}
		exclude "${project.group}/${project.mod_id}/asm/**"
	}
	
	manifest
	{
		attributes "Built-On-Java": "${System.getProperty("java.vm.version")} + (${System.getProperty("java.vm.vendor")})"
		attributes "Implementation-Title": project.name
		attributes "Implementation-Version": project.version
		attributes "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}"
		attributes "Built-On": "${project.mc_version}-${project.forge_version}"
		attributes "FMLAT": "${project.mod_id}_at.cfg"
		if(project.hasProperty("core_plugin"))
		{
			if(project.core_jar_in_jar)
			{
				attributes "ContainedDeps": coreJar.archivePath.name
			}
			else
			{
				attributes "FMLCorePlugin": project.core_plugin
			}
		}
	}
	classifier ""
}

task signJar(type: SignJar, dependsOn: reobfJar) {
	onlyIf
	{
		project.hasProperty("keyStore")
	}
	
	if(project.hasProperty("keyStore"))
	{
		keyStore = project.findProperty("keyStore")
		alias = project.findProperty("keyStoreAlias")
		storePass = project.findProperty("keyStorePass")
		keyPass = project.findProperty("keyStoreKeyPass")
		
		inputFile = jar.archivePath
		outputFile = jar.archivePath
	}
}

artifacts {
	archives apiJar
	archives deobfJar
	archives javadocJar
}

sourceSets {
	main {
		java {
			srcDir "src/main/java"
		}
		resources {
			srcDir "src/main/resources"
		}
	}
}

processResources {
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version
	
	from(sourceSets.main.resources.srcDirs) {
		include "mcmod.info"
		
		expand "version": project.version, "mcversion": project.minecraft.version
	}
	
	from(sourceSets.main.resources.srcDirs) {
		exclude "mcmod.info"
	}
}

tasks.build.dependsOn signJar, apiJar, signDeobfJar, javadocJar

def curseRelations = {
	optionalLibrary "jei"
}

curseforge {
	if(project.hasProperty("curse_key"))
		apiKey = project.curse_key
	
	
	if(project.hasProperty("curse_id"))
	{
		project
		{
			id = project.curse_id
		//	changelogType = "markdown"
		//	changelog = getChangelogText()
			releaseType = project.release_type
			
			relations curseRelations
			
			//no such jars for now
			//addArtifact javadocJar
			//addArtifact sourceJar
			//addArtifact apiJar
			
			//addGameVersion "1.12.2" //automatically determined by the CurseGradle plugin
			
			mainArtifact(jar)
			{
				displayName = "${project.mod_name} v${project.version} MC${mc_version}"
			}
		}
	}
}

tasks.curseforge.dependsOn build
